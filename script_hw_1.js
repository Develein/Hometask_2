// Первое задание

alert("Первое задание. Температура");
var tC = +prompt("Укажите температуру по Цельсию");
var tF = tC * 9 / 5 + 32;
alert(tC + " градусов по Цельсию это " + tF + " градусов по Фаренгейту");

// Второе задание

alert("Второе задание. Рокировка");
var a = +prompt("Введите первое число");
var b = +prompt("Введите второе число");
alert("Первое число = " + a + "\nВторое число = " + b);
a = b - a;
b = b - a;
a = a + b;
alert("После рокировки\nПервое число = " + a + "\nВторое число = " + b);

// Третье задание

alert("Третье задание. Василий")
var name = "Василий", admin;
admin = name;
alert(admin);

// Четвертое задание

alert("Четвертое задание.\nЧему будет равно JS-выражение 1000 + \"108\"\nОтвет - 1000108. Подтверждение далее.");
var sum = 1000 + "108";
alert(sum);

// Пятое задание

// Самостоятельно разобраться с атрибутами тега script (async и defer)

// Насколько я понял, разница в следующем:

// 1. Если использовать без defer и async, то страница будет загружаться постепенно, строчка за строчкой.
//     И, если у нас есть, например, объемный скрипт, то ниже строчки с его присоединением < script > страница не загрузится, пока не загрузится сам скрипт.

// 2. Если будем использовать defer, то страница будет загружать независимо от того, насколько там объемный скрипт. Он не затормозит загрузку.
//     Соответственно, скрипт сработает тогда, когда он загрузится. В том порядке, в котором они подгружаются в документе. 
//     То есть страница их не ждет, но второй по порядку скрипт ждёт первый, даже если загрузился раньше.
//     При этом, данные скрипты сработают только после загрузки страницы.

// 3. Если использовать async, то скрипт абсолютно независим, и будет запущен сразу, как будет загружен.
//    Такие скрипты не ждут друг друга и не ждут загрузки страницы.